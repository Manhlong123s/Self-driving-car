import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from keras import Sequential
from keras.src.layers import Conv2D, MaxPooling2D, BatchNormalization, Dropout, Dense, Flatten
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from tensorflow.keras.preprocessing import image
from tkinter import Tk, filedialog

# === ƒê∆∞·ªùng d·∫´n d·ªØ li·ªáu ===
train_dir = r'C:\Users\FPT\PyCharmMiscProject\augemt'
test_dir = r'C:\Users\FPT\PyCharmMiscProject\Data_test'  # <== Th∆∞ m·ª•c test c·ªßa b·∫°n

# === ImageDataGenerator cho train v√† test ===
train_gen = ImageDataGenerator(rescale=1./255)
test_gen = ImageDataGenerator(rescale=1./255)

# === Load d·ªØ li·ªáu ===
train_ds = train_gen.flow_from_directory(train_dir, target_size=(224, 224), batch_size=32, class_mode='categorical')
test_ds = test_gen.flow_from_directory(test_dir, target_size=(224, 224), batch_size=32, class_mode='categorical', shuffle=False)

# === Danh s√°ch class ===
classes = list(train_ds.class_indices.keys())

# === X√¢y d·ª±ng m√¥ h√¨nh CNN ===
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(224, 224, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Conv2D(96, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(len(classes), activation='softmax'))

# === Bi√™n d·ªãch m√¥ h√¨nh ===
model.compile(
    loss='categorical_crossentropy',
    optimizer='adam',
    metrics=["accuracy"]
)

# === Hu·∫•n luy·ªán m√¥ h√¨nh ===
history = model.fit(train_ds, epochs=20, batch_size=32, validation_data=test_ds)

# === ƒê√°nh gi√° m√¥ h√¨nh tr√™n t·∫≠p test ===
loss, acc = model.evaluate(test_ds)
print(f"\nüéØ Test accuracy: {acc * 100:.2f}% | Test loss: {loss:.4f}")


# === H√†m d·ª± ƒëo√°n ·∫£nh m·ªõi ===
def predict_image(image_path, threshold=0.3):
    img = load_img(image_path, target_size=(224, 224))
    plt.imshow(img)
    plt.axis('off')
    plt.title("·∫¢nh ƒë·∫ßu v√†o")
    plt.show()

    # Ti·ªÅn x·ª≠ l√Ω
    x = img_to_array(img)
    x = x / 255.0
    x = np.expand_dims(x, axis=0)

    # D·ª± ƒëo√°n
    pred = model.predict(x)[0]
    predicted_prob = np.max(pred)
    predicted_class_index = np.argmax(pred)
    predicted_class = classes[predicted_class_index]

    print("\nüß† Prediction Probabilities:")
    for i, cls in enumerate(classes):
        print(f"- {cls}: {pred[i] * 100:.2f}%")

    if predicted_prob < threshold:
        print(f"\n‚ö†Ô∏è D·ª± ƒëo√°n kh√¥ng ch·∫Øc ch·∫Øn (x√°c su·∫•t: {predicted_prob:.2f})")
        print("·∫¢nh c√≥ th·ªÉ kh√¥ng thu·ªôc l·ªõp n√†o.")
        return

    print(f"\n‚úÖ ·∫¢nh thu·ªôc l·ªõp: {predicted_class} (x√°c su·∫•t: {predicted_prob:.2f})")
    print(f"User: {predicted_class}")


# === Ch·ªçn ·∫£nh test b·∫±ng GUI v√† d·ª± ƒëo√°n ===
def choose_and_predict():
    root = Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename(
        title="Ch·ªçn ·∫£nh ƒë·ªÉ d·ª± ƒëo√°n",
        filetypes=[("Image Files", "*.jpg *.jpeg *.png *.bmp")]
    )
    if file_path:
        print(f"\nüñºÔ∏è ƒê√£ ch·ªçn ·∫£nh: {file_path}")
        predict_image(file_path)
    else:
        print("‚ùå Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c ch·ªçn.")

# === Ho·∫∑c: D·ª± ƒëo√°n t·∫•t c·∫£ ·∫£nh trong m·ªôt folder test ===
def predict_folder(folder_path):
    for file in os.listdir(folder_path):
        if file.lower().endswith(('.jpg', '.jpeg', '.png')):
            image_path = os.path.join(folder_path, file)
            print(f"\n=== D·ª± ƒëo√°n cho: {file} ===")
            predict_image(image_path)

# === G·ªçi m·ªôt trong hai h√†m d∆∞·ªõi ƒë√¢y ===
# choose_and_predict()  # ‚Üê M·ªü giao di·ªán ch·ªçn ·∫£nh
#predict_folder(r"C:\Users\FPT\PyCharmMiscProject\test_single_images")  # ‚Üê D·ª± ƒëo√°n ·∫£nh trong folder test

