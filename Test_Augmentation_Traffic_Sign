import os
import cv2
import unicodedata
import re
import albumentations as A
import os
import cv2
import albumentations as A
from tqdm import tqdm

# === C·∫•u h√¨nh th∆∞ m·ª•c ===
input_folder = 'C:\\Users\\FPT\\PyCharmMiscProject\\bien_bao_cam'    # üìÇ Th∆∞ m·ª•c ch·ª©a ·∫£nh g·ªëc
output_folder = 'C:\\Users\\FPT\\PyCharmMiscProject\\Down_Sampling_test'  # üìÇ Th∆∞ m·ª•c l∆∞u ·∫£nh sau augmentation

os.makedirs(output_folder, exist_ok=True)

# === X√¢y d·ª±ng pipeline augmentation nh∆∞ b·∫°n ƒë·ªãnh nghƒ©a ===
transform = A.Compose([
    A.Resize(width=224, height=224),
    A.GaussianBlur(blur_limit=3),
    A.Downscale(scale_min=0.5, scale_max=0.8, p=1),
    A.RandomBrightnessContrast(brightness_limit=0.2, contrast_limit=0.2, p=0.5)
])

# === Duy·ªát v√† x·ª≠ l√Ω t·∫•t c·∫£ ·∫£nh trong input folder ===
for filename in tqdm(os.listdir(input_folder)):
    if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp', '.tiff')):
        input_path = os.path.join(input_folder, filename)
        output_path = os.path.join(output_folder, filename)

        # ƒê·ªçc v√† ki·ªÉm tra ·∫£nh
        image = cv2.imread(input_path)
        if image is None:
            print(f"‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh: {filename}. B·ªè qua.")
            continue

        # BGR ‚Üí RGB
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # Augmentation
        augmented = transform(image=image)
        augmented_image = augmented['image']

        # RGB ‚Üí BGR ƒë·ªÉ l∆∞u b·∫±ng OpenCV
        augmented_image_bgr = cv2.cvtColor(augmented_image, cv2.COLOR_RGB2BGR)

        # Ghi ·∫£nh
        cv2.imwrite(output_path, augmented_image_bgr)

print("‚úÖ X·ª≠ l√Ω to√†n b·ªô ·∫£nh ho√†n t·∫•t!")

# Thi·∫øt l·∫≠p th∆∞ m·ª•c ƒë√≠ch
destination_root = "C:\\Users\\FPT\\PyCharmMiscProject\\Data_test"  # ƒê·ªïi th√†nh th∆∞ m·ª•c ƒë√≠ch c·ªßa b·∫°n
os.makedirs(destination_root, exist_ok=True)

# ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c ch·ª©a ·∫£nh
folder_path = "C:\\Users\\FPT\\PyCharmMiscProject\\Down_Sampling_test"  # ƒê·ªïi th√†nh th∆∞ m·ª•c ch·ª©a ·∫£nh c·ªßa b·∫°n


# Ki·ªÉm tra n·∫øu kh√¥ng c√≥ th∆∞ m·ª•c n√†o ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
if not folder_path:
    print("No folder was selected.")
    exit()

# L·∫•y danh s√°ch t·∫•t c·∫£ c√°c t·ªáp ·∫£nh trong th∆∞ m·ª•c
image_extensions = ('.jpg', '.jpeg', '.png', '.bmp')
image_files = [f for f in os.listdir(folder_path) if f.lower().endswith(image_extensions)]

# Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ·∫£nh trong th∆∞ m·ª•c
if not image_files:
    print("No images found in the selected folder.")
    exit()

# --- Danh s√°ch c√°c ph√©p bi·∫øn ƒë·ªïi (augmentations) ---
augmentations = {
    'random_brightness1': A.RandomBrightnessContrast(p=1),
    'random_brightness2': A.RandomBrightnessContrast(p=1),
    'random_brightness3': A.RandomBrightnessContrast(p=1),
    'random_brightness4': A.RandomBrightnessContrast(p=1),
    'blur': A.Blur(blur_limit=50, p=1),
    'GaussianBlur': A.GaussianBlur(blur_limit=(3, 7), p=1),
    'MedianBlur': A.MedianBlur(blur_limit=(3, 7), p=1),
    'contrast1': A.RandomBrightnessContrast(brightness_limit=0.2, contrast_limit=0.2, p=1.0),
    'Hue': A.HueSaturationValue(hue_shift_limit=20, sat_shift_limit=30, val_shift_limit=20, p=1.0),
    'channel Shuffle': A.ChannelShuffle(p=1),
    'Histogram Equalization': A.CLAHE(clip_limit=4.0, tile_grid_size=(8, 8), p=1.0),
    'Posterize': A.Posterize(num_bits=4, p=1.0),
    'shift_scale_rotate': A.ShiftScaleRotate(shift_limit=0.1, scale_limit=0.1, rotate_limit=20, p=1),
    'elastic_transform': A.ElasticTransform(p=1),
    'grid_distortion': A.GridDistortion(p=1),
}

# Duy·ªát qua t·∫•t c·∫£ c√°c ·∫£nh trong th∆∞ m·ª•c v√† √°p d·ª•ng c√°c ph√©p bi·∫øn ƒë·ªïi
for file_name in image_files:
    # ƒê·ªçc ·∫£nh
    file_path = os.path.join(folder_path, file_name)

    # ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng Unicode
    try:
        image_cv = cv2.imread(file_path)
    except Exception as e:
        print(f"Error reading file {file_name}: {e}")
        continue

    if image_cv is None:
        print(f"Unable to read the image from: {file_path}")
        continue

    # L√†m s·∫°ch t√™n t·ªáp v√† t·∫°o th∆∞ m·ª•c ƒë√≠ch
    name, ext = os.path.splitext(file_name)

    # Lo·∫°i b·ªè d·∫•u ngo·∫∑c v√† n·ªôi dung b√™n trong t√™n file
    clean_name = re.sub(r'\(.*?\)', '', name).strip().replace(' ', '_')
    clean_name = ''.join(c for c in unicodedata.normalize('NFKD', clean_name) if not unicodedata.combining(c))
    clean_name = clean_name.lower()

    target_folder = os.path.join(destination_root, clean_name)
    os.makedirs(target_folder, exist_ok=True)

    # T·∫°o log t·ªáp ƒë√£ l∆∞u
    log_file = os.path.join(target_folder, "saved_filenames.txt")
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(file_name + "\n")

    # √Åp d·ª•ng c√°c ph√©p bi·∫øn ƒë·ªïi v√† l∆∞u k·∫øt qu·∫£
    for name, aug in augmentations.items():
        augmented = aug(image=cv2.cvtColor(image_cv, cv2.COLOR_BGR2RGB))
        aug_image = augmented['image']
        aug_image_bgr = cv2.cvtColor(aug_image, cv2.COLOR_RGB2BGR)
        output_path = os.path.join(target_folder, f"{name}_{file_name}")
        cv2.imwrite(output_path, aug_image_bgr)
        print(f"Saved: {output_path}")
